<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModMenu</name>
    </assembly>
    <members>
        <member name="T:ModMenu.Helpers">
            <summary>
            Generic utils for simple operations.
            </summary>
        </member>
        <member name="T:ModMenu.ModMenu">
            <summary>
            API mods can use to add settings to the Mods menu page.
            </summary>
        </member>
        <member name="F:ModMenu.ModMenu.Settings">
            <summary>
            Stores all settings entities in the mod menu.
            </summary>
        </member>
        <member name="M:ModMenu.ModMenu.AddSettings(ModMenu.Settings.SettingsBuilder)">
            <summary>
            Adds a new group of settings to the Mods menu page.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="settings"/> contains a setting with a key that already exists.
            </exception>
        </member>
        <member name="M:ModMenu.ModMenu.AddSettings(Kingmaker.UI.SettingsUI.UISettingsGroup)">
            <summary>
            Adds a new group of settings to the Mods menu page.
            </summary>
            
            <remarks>
            <para>
            Using <see cref="M:ModMenu.ModMenu.AddSettings(ModMenu.Settings.SettingsBuilder)"/> is recommended. If you prefer to construct the settings
            on your own you can use this method.
            </para>
            
            <para>
            Settings added in this way cannot be retrieved using <see cref="M:ModMenu.ModMenu.GetSetting``2(System.String)"/> or
            <see cref="M:ModMenu.ModMenu.GetSettingValue``1(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ModMenu.ModMenu.GetSetting``2(System.String)">
            <returns>
            The setting with the specified <paramref name="key"/>, or null if it does not exist or has the wrong type.
            </returns>
        </member>
        <member name="M:ModMenu.ModMenu.GetSettingValue``1(System.String)">
            <returns>
            The value of the setting with the specified <paramref name="key"/>, or <c>default</c> if it does not exist or
            has the wrong type.
            </returns>
        </member>
        <member name="M:ModMenu.ModMenu.SetSetting``2(System.String,``1)">
            <summary>
            Attempts to set the value of a setting.
            </summary>
            
            <remarks>Added in v1.1.0</remarks>
            
            <returns>True if the setting was set, false otherwise.</returns>
        </member>
        <member name="M:ModMenu.ModMenu.SetSetting(System.String,System.Boolean)">
            <summary>
            Convenience method for <see cref="M:ModMenu.ModMenu.SetSetting``2(System.String,``1)"/> with
            <c>&lt;SettingsEntityBool, bool&gt;</c>.
            </summary>
            
            <inheritdoc cref="M:ModMenu.ModMenu.SetSetting``2(System.String,``1)"/>
        </member>
        <member name="M:ModMenu.ModMenu.SetSetting``1(System.String,``0)">
            <summary>
            Convenience method for <see cref="M:ModMenu.ModMenu.SetSetting``2(System.String,``1)"/> with
            <c>&lt;SettingsEntityEnum&lt;T&gt;, T&gt;</c>.
            </summary>
            
            <inheritdoc cref="M:ModMenu.ModMenu.SetSetting``2(System.String,``1)"/>
        </member>
        <member name="M:ModMenu.ModMenu.SetSetting(System.String,System.Single)">
            <summary>
            Convenience method for <see cref="M:ModMenu.ModMenu.SetSetting``2(System.String,``1)"/> with
            <c>&lt;SettingsEntityFloat, float&gt;</c>.
            </summary>
            
            <inheritdoc cref="M:ModMenu.ModMenu.SetSetting``2(System.String,``1)"/>
        </member>
        <member name="M:ModMenu.ModMenu.SetSetting(System.String,System.Int32)">
            <summary>
            Convenience method for <see cref="M:ModMenu.ModMenu.SetSetting``2(System.String,``1)"/> with
            <c>&lt;SettingsEntityInt, int&gt;</c>.
            </summary>
            
            <inheritdoc cref="M:ModMenu.ModMenu.SetSetting``2(System.String,``1)"/>
        </member>
        <member name="T:ModMenu.NewTypes.SettingsEntityPatches.SettingsVM_Patch">
            <summary>
            Patch to return the correct view model for <see cref="T:ModMenu.NewTypes.UISettingsEntityImage"/>
            </summary>
        </member>
        <member name="T:ModMenu.NewTypes.SettingsEntityPatches.SettingsViews_Patch">
            <summary>
            Patch to add new setting type prefabs.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.KeyBinding.New(System.String,Kingmaker.UI.KeyboardAccess.GameModesGroup,Kingmaker.Localization.LocalizedString)">
            <inheritdoc cref="M:ModMenu.Settings.KeyBinding.#ctor(System.String,Kingmaker.UI.KeyboardAccess.GameModesGroup,Kingmaker.Localization.LocalizedString)"/>
        </member>
        <member name="M:ModMenu.Settings.KeyBinding.SetIsHoldTrigger(System.Boolean)">
            <summary>
            If true, the key binding is activated only when held down rather than just pressed.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.KeyBinding.SetPrimaryBinding(UnityEngine.KeyCode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the default key binding.
            </summary>
            
            <param name="keyCode">Unity's key code for the binding</param>
            <param name="withCtrl">If true, the binding includes the Ctrl key</param>
            <param name="withAlt">If true, the binding includes the Alt key</param>
            <param name="withShift">If true, the binding includes the Shift key</param>
        </member>
        <member name="M:ModMenu.Settings.KeyBinding.SetSecondaryBinding(UnityEngine.KeyCode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the default alternate binding. This is just a second key combination for the same binding. Ignored if
            there is no primary binding, see <see cref="M:ModMenu.Settings.KeyBinding.SetPrimaryBinding(UnityEngine.KeyCode,System.Boolean,System.Boolean,System.Boolean)"/>.
            </summary>
            
            <param name="keyCode">Unity's key code for the binding</param>
            <param name="withCtrl">If true, the binding includes the Ctrl key</param>
            <param name="withAlt">If true, the binding includes the Alt key</param>
            <param name="withShift">If true, the binding includes the Shift key</param>
        </member>
        <member name="M:ModMenu.Settings.KeyBinding.#ctor(System.String,Kingmaker.UI.KeyboardAccess.GameModesGroup,Kingmaker.Localization.LocalizedString)">
            <inheritdoc cref="M:ModMenu.Settings.BaseSettingWithValue`4.#ctor(System.String,`0,Kingmaker.Localization.LocalizedString)"/>
            
            <param name="gameModesGroup">Indicates in which game modes the key binding functions</param>
        </member>
        <member name="T:ModMenu.Settings.ModsMenuEntity">
            <summary>
            Class containing patches necessary to inject an additional settings screen into the menu.
            </summary>
        </member>
        <member name="T:ModMenu.Settings.ModsMenuEntity.SettingsVM_Constructor">
            <summary>
            Patch to create the Mods Menu ViewModel.
            </summary>
        </member>
        <member name="T:ModMenu.Settings.ModsMenuEntity.SettingsMenuSelectorPCView_Patch">
            <summary>
            Patch to create the Mods Menu View. Needed to show the menu in-game.
            </summary>
        </member>
        <member name="T:ModMenu.Settings.ModsMenuEntity.UISettingsManager_GetSettingsList">
            <summary>
            Patch to return the Mods settings list
            </summary>
        </member>
        <member name="T:ModMenu.Settings.SettingsBuilder">
            <summary>
            Builder API for constructing settings.
            </summary>
            
            <remarks>
            <para>
            All the <c>AddX</c> methods return <c>this</c> to support builder style method chaining. Once your SettingsGroup
            is configured add it to the Mods menu page by calling <see cref="M:ModMenu.ModMenu.AddSettings(ModMenu.Settings.SettingsBuilder)"/>.
            </para>
            
            <para>
            Entries are displayed in the order they are added.
            </para>
            
            <para>
            Creats a setting group with a single feature toggle:
            </para>
            <example>
            <code>
            ModMenu.AddSettings(
              SettingsGroup.New("mymod.settingsgroup", MySettingsGroupTitle)
                .AddImage(MyModBanner)
                .AddToggle(
                  new(
                    "mymod.feature.toggle",
                    defaultValue: false,
                    MyFeatureToggleDescription)));
            </code>
            </example>
            
            <para>
            To actually use the settings values you must either handle <c>OnValueChanged</c> events which you can do by
            passing in a <see cref="!:Setting&lt;T&gt;"/> with <c>onValueChanged</c> specified, or by storing the
            <c>SettingsEntity</c>:
            </para>
            <example>
            <code>
            SettingsEntity&lt;bool&gt; featureToggle;
            SettingsGroup.New("mymod.settingsgroup", MySettingsGroupTitle)
              .AddToggle(
                new(
                  "mymod.feature.toggle.using.event",
                  defaultValue: false,
                  MyFeatureToggleDescription,
                  // When toggled this calls HandleMyFeatureToggle(value) where value is the new setting.
                  onValueChanged: value => HandleMyFeatureToggle(value)))
              .AddToggle(
                new(
                  "mymod.feature.toggle.using.entity",
                  defaultValue: false,
                  MyFeatureToggleDescription),
                // When toggled featureToggle updates its value which can be retrieved by calling featureToggle.GetValue()
                out featureToggle));
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.New(System.String,Kingmaker.Localization.LocalizedString)">
            <param name="key">
            Globally unique key / name for the settings group. Use only lowercase letters, numbers, '-', and '.'
            </param>
            <param name="title">Title of the settings group, displayed on the settings page</param>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddImage(UnityEngine.Sprite,System.Int32,System.Single)">
            <summary>
            Adds a row containing an image. There is no setting tied to this, it is just for decoration.
            </summary>
            
            <remarks>Height added in v1.2.1</remarks>
            
            <param name="height">
            Sets the row height. Keep in mind the scaling is relative to resolution; a standard row has a height of 40. The
            image width will be scaled to preserve the aspect ratio.
            </param>
            <param name="imageScale">
            Adjust the size of the image. Use this if the default logic doesn't get the size of the image correct.
            </param>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddImage(UnityEngine.Sprite,System.Int32)">
            <summary>
            Adds a row containing an image. There is no setting tied to this, it is just for decoration.
            </summary>
            
            <remarks>Height added in v1.1.0</remarks>
            
            <param name="height">
            Sets the row height. Keep in mind the scaling is relative to resolution; a standard row has a height of 40. The
            image width will be scaled to preserve the aspect ratio.
            </param>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddImage(UnityEngine.Sprite)">
            <inheritdoc cref="M:ModMenu.Settings.SettingsBuilder.AddImage(UnityEngine.Sprite,System.Int32)"/>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddButton(ModMenu.Settings.Button)">
            <summary>
            Adds a row containing a button. There is no setting tied to this, only an event handler.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddDefaultButton(System.Action)">
            <summary>
            Adds a button which resets the value of each setting in this group to its default. Triggers a confirmation
            prompt before executing.
            </summary>
            
            <remarks>Added in v1.1.0</remarks>
            
            <param name="onDefaultsApplied">Invoked after default settings are applied.</param>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddToggle(ModMenu.Settings.Toggle)">
            <summary>
            Adds an On / Off setting toggle.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddDropdown``1(ModMenu.Settings.Dropdown{``0})">
            <summary>
            Adds a dropdown setting populated using an enum.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddDropdownList(ModMenu.Settings.DropdownList)">
            <summary>
            Adds a dropdown populated using a list of strings. The value of the setting is the index in the list.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddSliderFloat(ModMenu.Settings.SliderFloat)">
            <summary>
            Adds a slider based on a float.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddSliderInt(ModMenu.Settings.SliderInt)">
            <summary>
            Adds a slider based on an int.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddKeyBinding(ModMenu.Settings.KeyBinding,System.Action)">
            <summary>
            Adds a button which can be used to set key bindings.
            </summary>
            
            <remarks>
            Keep in mind:
            <list type="bullet">
            <item>
            The KeyBinding's <c>Key</c> must be a unique identifier for the setting as well as a unique identifier for the
            binding. If there's a conflict then <paramref name="onPress"/> will never trigger.
            </item>
            <item>
            If another key binding has the same mapping when the game loads, this key binding will be cleared and the user
            must set a new one. This safety check does not happen when resetting to defaults using the default button from
            <see cref="M:ModMenu.Settings.SettingsBuilder.AddDefaultButton(System.Action)"/>. This is an owlcat limitation.
            </item>
            </list>
            </remarks>
            
            <param name="onPress">Action invoked when the key binding is activated</param>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddSetting(Kingmaker.UI.SettingsUI.UISettingsEntityBase)">
            <summary>
            Use for settings you construct on your own.
            </summary>
            
            <remarks>
            Note that settings added this way cannot be retrieved using <see cref="M:ModMenu.ModMenu.GetSetting``2(System.String)"/>
            or <see cref="M:ModMenu.ModMenu.GetSettingValue``1(System.String)"/>.
            </remarks>
        </member>
        <member name="M:ModMenu.Settings.SettingsBuilder.AddSubHeader(Kingmaker.Localization.LocalizedString,System.Boolean)">
            <summary>
            Adds a sub-header marking the start of collapsible group of settings.
            </summary>
            
            <remarks>
            The sub-header applies to every view following it until another sub-header is added.
            </remarks>
            
            <param name="startExpanded">If true, the sub-header starts expanded.</param>
        </member>
        <member name="M:ModMenu.Settings.BaseSetting`2.#ctor(Kingmaker.Localization.LocalizedString)">
            <param name="description">Short description displayed on the setting row.</param>
        </member>
        <member name="M:ModMenu.Settings.BaseSetting`2.ShowVisualConnection">
            <summary>
            Changes the setting bullet point to a visual connection line. See the game's visual perception settings for an
            example.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.BaseSetting`2.WithLongDescription(Kingmaker.Localization.LocalizedString)">
            <summary>
            Sets the long description displayed on the right side of the menu when the setting is highlighted.
            </summary>
            
            <remarks>
            This sets <c>UISettingsEntityBase.TooltipDescription</c>. When not specified, Description is used.
            </remarks>
        </member>
        <member name="M:ModMenu.Settings.BaseSettingBuilder`2.#ctor(Kingmaker.Localization.LocalizedString)">
            <inheritdoc cref="M:ModMenu.Settings.BaseSetting`2.#ctor(Kingmaker.Localization.LocalizedString)"/>
        </member>
        <member name="M:ModMenu.Settings.Button.New(Kingmaker.Localization.LocalizedString,Kingmaker.Localization.LocalizedString,System.Action)">
            <inheritdoc cref="M:ModMenu.Settings.Button.#ctor(Kingmaker.Localization.LocalizedString,Kingmaker.Localization.LocalizedString,System.Action)"/>
        </member>
        <member name="M:ModMenu.Settings.Button.#ctor(Kingmaker.Localization.LocalizedString,Kingmaker.Localization.LocalizedString,System.Action)">
            <inheritdoc cref="M:ModMenu.Settings.BaseSettingBuilder`2.#ctor(Kingmaker.Localization.LocalizedString)"/>
            <param name="buttonText">Text displayed on the button</param>
            <param name="onClick">Action invoked when the button is clicked</param>
        </member>
        <member name="F:ModMenu.Settings.BaseSettingWithValue`4.RebootRequired">
            <summary>
            Currently this is unused but I might add some kind of special handling later so the code is here.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.BaseSettingWithValue`4.#ctor(System.String,`0,Kingmaker.Localization.LocalizedString)">
            <inheritdoc cref="M:ModMenu.Settings.BaseSetting`2.#ctor(Kingmaker.Localization.LocalizedString)"/>
            <param name="key">
            Globally unique key / name for the setting. Use only lowercase letters, numbers, '-', and '.'
            </param>
            <param name="defaultValue">Default value for the setting.</param>
        </member>
        <member name="M:ModMenu.Settings.BaseSettingWithValue`4.DependsOnSave">
            <summary>
            Causes the setting to be associated with the current save. By default settings apply globally.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.BaseSettingWithValue`4.OnValueChanged(System.Action{`0})">
            <summary>
            Invokes the provided action when the value is changed and applied.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.BaseSettingWithValue`4.OnTempValueChanged(System.Action{`0})">
            <summary>
            Invokes the provided action when the value is changed, before the change is applied.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.BaseSettingWithValue`4.IsModificationAllowed(System.Func{System.Boolean})">
            <summary>
            When the menu is displayed, the provided function is checked to determine if the setting can be changed.
            </summary>
            
            <remarks>
            This is only checked when the Mods menu page is opened. As a result you cannot use this to create dependencies
            between settings.
            </remarks>
        </member>
        <member name="M:ModMenu.Settings.Toggle.New(System.String,System.Boolean,Kingmaker.Localization.LocalizedString)">
            <inheritdoc cref="M:ModMenu.Settings.Toggle.#ctor(System.String,System.Boolean,Kingmaker.Localization.LocalizedString)"/>
        </member>
        <member name="M:ModMenu.Settings.Toggle.#ctor(System.String,System.Boolean,Kingmaker.Localization.LocalizedString)">
            <inheritdoc cref="M:ModMenu.Settings.BaseSettingWithValue`4.#ctor(System.String,`0,Kingmaker.Localization.LocalizedString)"/>
        </member>
        <member name="M:ModMenu.Settings.Dropdown`1.New(System.String,`0,Kingmaker.Localization.LocalizedString,Kingmaker.UI.SettingsUI.UISettingsEntityDropdownEnum{`0})">
            <inheritdoc cref="M:ModMenu.Settings.Dropdown`1.#ctor(System.String,`0,Kingmaker.Localization.LocalizedString,Kingmaker.UI.SettingsUI.UISettingsEntityDropdownEnum{`0})"/>
        </member>
        <member name="M:ModMenu.Settings.Dropdown`1.#ctor(System.String,`0,Kingmaker.Localization.LocalizedString,Kingmaker.UI.SettingsUI.UISettingsEntityDropdownEnum{`0})">
            <inheritdoc cref="M:ModMenu.Settings.BaseSettingWithValue`4.#ctor(System.String,`0,Kingmaker.Localization.LocalizedString)"/>
            
            <remarks>
            Due to Unity limitations you need to create <paramref name="dropdown"/> yourself:
            
            <example>
            <code>
            public enum MySettingsEnum { /* ... */ }
            // Declare a non-generic class which inherits from the generic type
            private class UISettingsEntityDropdownMySettingsEnum : UISettingsEntityDropdownEnum&lt;MysettingsEnum&gt; { }
            
            new(
              "mymod.feature.enum",
              MySettingsEnum.SomeValue,
              MyEnumFeatureDescription,
              ScriptableObject.CreateInstance&lt;UISettingsEntityDropdownMySettingsEnum&gt;());
            </code>
            </example>
            </remarks>
            
            <param name="dropdown">
            Instance of class inheriting from <c>UISettingsEntityDropdownEnum&lt;TEnum&gt;</c>, created by calling
            <c>ScriptableObject.CreateInstance&lt;T&gt;()</c>
            </param>
        </member>
        <member name="M:ModMenu.Settings.DropdownList.New(System.String,System.Int32,Kingmaker.Localization.LocalizedString,System.Collections.Generic.List{Kingmaker.Localization.LocalizedString})">
            <inheritdoc cref="M:ModMenu.Settings.DropdownList.#ctor(System.String,System.Int32,Kingmaker.Localization.LocalizedString,System.Collections.Generic.List{Kingmaker.Localization.LocalizedString})"/>
        </member>
        <member name="M:ModMenu.Settings.DropdownList.#ctor(System.String,System.Int32,Kingmaker.Localization.LocalizedString,System.Collections.Generic.List{Kingmaker.Localization.LocalizedString})">
            <inheritdoc cref="M:ModMenu.Settings.BaseSettingWithValue`4.#ctor(System.String,`0,Kingmaker.Localization.LocalizedString)"/>
            
            <param name="defaultSelected">Index of the default selected value in <paramref name="values"/></param>
            <param name="values">List of values to display</param>
        </member>
        <member name="M:ModMenu.Settings.DropdownButton.New(System.String,System.Int32,Kingmaker.Localization.LocalizedString,Kingmaker.Localization.LocalizedString,System.Action{System.Int32},System.Collections.Generic.List{Kingmaker.Localization.LocalizedString})">
            <inheritdoc cref="M:ModMenu.Settings.DropdownButton.#ctor(System.String,System.Int32,Kingmaker.Localization.LocalizedString,Kingmaker.Localization.LocalizedString,System.Action{System.Int32},System.Collections.Generic.List{Kingmaker.Localization.LocalizedString})"/>
        </member>
        <member name="M:ModMenu.Settings.DropdownButton.#ctor(System.String,System.Int32,Kingmaker.Localization.LocalizedString,Kingmaker.Localization.LocalizedString,System.Action{System.Int32},System.Collections.Generic.List{Kingmaker.Localization.LocalizedString})">
            <inheritdoc cref="M:ModMenu.Settings.BaseSettingWithValue`4.#ctor(System.String,`0,Kingmaker.Localization.LocalizedString)"/>
            
            <param name="defaultSelected">Index of the default selected value in <paramref name="values"/></param>
            <param name="values">List of values to display</param>
        </member>
        <member name="M:ModMenu.Settings.SliderFloat.New(System.String,System.Single,Kingmaker.Localization.LocalizedString,System.Single,System.Single)">
            <inheritdoc cref="M:ModMenu.Settings.SliderFloat.#ctor(System.String,System.Single,Kingmaker.Localization.LocalizedString,System.Single,System.Single)"/>
        </member>
        <member name="M:ModMenu.Settings.SliderFloat.WithStep(System.Single)">
            <summary>
            Sets the size of a single step on the slider.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.SliderFloat.WithDecimalPlaces(System.Int32)">
            <summary>
            Sets the number of decimal places tracked on the slider.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.SliderFloat.HideValueText">
            <summary>
            Hides the text showing the slider value.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.SliderFloat.#ctor(System.String,System.Single,Kingmaker.Localization.LocalizedString,System.Single,System.Single)">
            <inheritdoc cref="M:ModMenu.Settings.BaseSettingWithValue`4.#ctor(System.String,`0,Kingmaker.Localization.LocalizedString)"/>
            
            <remarks>
            <c>UISettingsEntitySliderFloat</c> Defaults:
            <list type="bullet">
            <item>
              <term><c>m_Step</c></term>
              <description><c>0.1f</c></description>
            </item>
            <item>
              <term><c>m_DecimalPlaces</c></term>
              <description><c>1</c></description>
            </item>
            <item>
              <term><c>m_ShowValueText</c></term>
              <description><c>true</c></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:ModMenu.Settings.SliderInt.New(System.String,System.Int32,Kingmaker.Localization.LocalizedString,System.Int32,System.Int32)">
            <inheritdoc cref="M:ModMenu.Settings.SliderInt.#ctor(System.String,System.Int32,Kingmaker.Localization.LocalizedString,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ModMenu.Settings.SliderInt.HideValueText">
            <summary>
            Hides the text showing the slider value.
            </summary>
        </member>
        <member name="M:ModMenu.Settings.SliderInt.#ctor(System.String,System.Int32,Kingmaker.Localization.LocalizedString,System.Int32,System.Int32)">
            <inheritdoc cref="M:ModMenu.Settings.BaseSettingWithValue`4.#ctor(System.String,`0,Kingmaker.Localization.LocalizedString)"/>
            
            <remarks>
            <c>UISettingsEntitySliderInt</c> Defaults:
            <list type="bullet">
            <item>
              <term><c>m_ShowValueText</c></term>
              <description><c>true</c></description>
            </item>
            </list>
            </remarks>
        </member>
    </members>
</doc>
